1. Using class WAP to input name, address, age and salary of an Employee and display
the information.

/*
1. Using class WAP to input name, address, age and salary of an Employee and
 display the information.
 */
#include<iostream>
#include<conio.h>
#include<stdlib.h>

using namespace std;

class Employee{
      private:
            char name[20],address[20];
            int age;
            float salary;

      public:
            void input(){
                  fflush(stdin);
                  cout<<"enter name of employee "<<endl;
                  cin.get(name,20);
                  fflush(stdin);
                  cout<<"enter address of employee"<<endl;
                  cin.get(address,20);
                  fflush(stdin);
                  cout<<"enter age of employee "<<endl;
                  cin>>age;
                  cout<<"enter salary of employee"<<endl;
                  cin>>salary;
            }

            void display(){
                  cout  <<"Employee name = "<<name<<endl
                        <<"Employee address = "<<address<<endl
                        <<"Employee age = "<<age<<endl
                        <<"Employee salary = "<<salary<<endl;
            }
};

int main(){
      Employee e;

      e.input();
      e.display();




      return 0;
}

--------------------------------------------------------------------

enter name of employee
akash
enter address of employee
sanapa
enter age of employee
22
enter salary of employee
200000
Employee name = akash
Employee address = sanapa
Employee age = 22
Employee salary = 200000



=====================================================================================



2. Using class WAP to input two numbers and display the greatest number.




/*

2. Using class WAP to input two numbers and display the greatest number.
*/

#include<iostream>
#include<conio.h>

using namespace std;

inline int great(int a, int b){
      return (a>b? a:b);
}

class Greater {
      int x,y;

      public:
            void input(){
                  cout<<"enter x and y "<<endl;
                  cin>>x>>y;
            }
            void display(){
                  cout<<great(x,y)<<" is the greatest"<<endl;
            }
};

int main(){

      Greater g;

      g.input();
      g.display();



      return 0;
}


----------------------------------------------------------------------------

enter x and y
5
9
9 is the greatest


=====================================================================================



3. WAP to input 5 number(using array), count the even numbers and display it.


/*

3. WAP to input 5 number(using array), count the even numbers and display it.

*/

#include<iostream>

using namespace std;

class Array{
      int n[5],i,countEve;

      public:
            Array(){
                  countEve=0;
                  i=0;
            }
            void input(){
                  cout<<"enter 5 number " <<endl;
                  for(i=0;i<5;i++){
                        cin>>n[i];
                  }
            }

            void countEven(){
                  for(i=0;i<5;i++){

                        if(n[i]%2==0){
                              countEve++;
                        }
                  }
            }

            void display(){
                  cout<<"numbers "<<endl;
                  for(i=0;i<5;i++){
                        cout<<n[i]<<endl;
                  }
                  cout<<"even numbers = "<<countEve<<endl;
            }
};

int main(){
      Array a;

      a.input();

      a.countEven();

      a.display();


      return 0;
}


-----------------------------------------------------------------------------------


enter 5 number
4
3
6
6
7
numbers
4
3
6
6
7
even numbers = 3



===================================================================================

4. WAP to find the area of rectangle and area of square using inline function.


/*
4. WAP to find the area of rectangle and area of square using inline function.

*/

#include<iostream>

using namespace std;

inline int  area(int l, int b){

      return (l*b);
}

inline int  area(int l){
      return (l*l);
}

int main(){

      int l,b;

      cout<<"enter length and breadth of rectangle " <<endl;
      cin>>l>>b;

      cout<<"area of rectangle = "<<area(l,b);


      cout<<endl<<"enter length of square "<<endl;
      cin>>l;

      cout<<"area of square = "<<area(l);


      return 0;
}


---------------------------------------------------------------------------------

enter length and breadth of rectangle
3
7
area of rectangle = 21
enter length of square
5
area of square = 25



==================================================================================



5. WAP to swap the private data number of two different using friend function.


/*

5. WAP to swap the private data number of two different using friend function.
*/


#include<iostream>
using namespace std;

class Beta;

class Alpha{
      int num;

      public:
            Alpha(){
                  num=1;
            }
            void display(){
                  cout<<"alpha num = " <<num<<endl;
            }
            friend void swapping(Alpha &, Beta &);

};

class Beta{
      int num;

      public:
            Beta(){
                  num=8;
            }
            void display(){
                  cout<<"beta num = "<<num<<endl;
            }
            friend void swapping(Alpha &, Beta &);

};

void swapping(Alpha &a, Beta &b){
                  int temp;

                  temp=a.num;
                  a.num=b.num;
                  b.num=temp;
}

int main(){
      Alpha a;
      Beta b;

      cout<<"before swapping "<<endl;
      a.display();
      b.display();

      swapping(a,b);

      cout<<"after swapping"<<endl;
      a.display();
      b.display();

      return 0;
}





-----------------------------------------------------------------------------------

before swapping
alpha num = 1
beta num = 8
after swapping
alpha num = 8
beta num = 1
=================================================================================



6. WAP to input n numbers from keyboard and count the total number of even numbers
 using dynamic memory allocation.




 /*
6. WAP to input n numbers from keyboard and count the total number of even numbers
 using dynamic memory allocation.

*/

#include<iostream>

using namespace std;

class Numbers {
      int *ptr;
      int i,n, countEve;

      public:
            Numbers(int n){
                  this->n=n;
                  ptr= new int [n];
                  countEve =0;
            }

            void input(){
                  cout<<"enter "<<n<<" number "<<endl;
                  for(i=0;i<n;i++){
                        cin>>ptr[i];
                  }
            }

            void countEven(){
                  for(i=0;i<n;i++){

                        if(ptr[i]%2==0)
                              countEve++;

                  }
            }

            void display(){
                  cout<<"even numbers = "<<countEve<<endl;
            }
};

int main(){
      int n;

      cout<<"enter number of number "<<endl;
      cin>>n;

      Numbers x(n);

      x.input();

      x.countEven();

      x.display();


      return 0;
}



 ---------------------------------------------------------------------------

enter number of number
6
enter 6 number
2
4
6
8
7
7
even numbers = 4


==================================================================================



7. Create a template class which calculates the sum of two int,
 two float and one int and a float.



 /*


7. Create a template class which calculates the sum of two int,
 two float and one int and a float.

*/

#include<iostream>

using namespace std;

template<class T1, class T2>

class Alpha{
      T1 x;
      T2 y;

      public:
            Alpha(T1 a, T2 b){
                  x=a;
                  y=b;
            }

            void displaySum(){
                  cout<<"sum = "<<x+y<<endl;
            }
};

int main(){
      Alpha <int, int> ii(3,7);
      Alpha<float, float> ff(3.66,5.789);
      Alpha<float,int> fi(3.376,5);

      ii.displaySum();
      ff.displaySum();
      fi.displaySum();

      return 0;

}



 ----------------------------------------------------------------------------------


 sum = 10
sum = 9.449
sum = 8.376


==================================================================



8. WAP to add two complex number by overloading “+” operator






/*

8. WAP to add two complex number by overloading “+” operator
*/

#include<iostream>

using namespace std;

class Complex{
      int real,imaginary;

      public:
            Complex(int a, int b){
                  real=a;
                  imaginary=b;
            }

           void operator +(Complex c){
                  real= real+ c.real;
                  imaginary= imaginary + c.imaginary;

            }

            void display(){
                  cout<<"complex number = "<<real<<" + i "<<imaginary<<" )"<<endl;
            }
};

int main(){
      Complex c1(2,6);
      Complex c2(4,7);

      c1.display();
      c2.display();

      cout  <<"                       +"<<endl
            <<"----------------------------"<<endl;

      c1+c2;

      c1.display();

      return 0;
}



-------------------------------------------------------------------------------


complex number = 2 + i 6 )
complex number = 4 + i 7 )
                       +
----------------------------
complex number = 6 + i 13 )



=================================================================================


9. WAP to illustrate the ambiguity in hybrid inheritance


/*

9. WAP to illustrate the ambiguity in hybrid inheritance
 */

#include<iostream>

using namespace std;

class A{

      public:
            void display(){
                  cout<<"class A"<<endl;
            }
};

class B : public A{
};

class C: public A{
};

class D: public B, public C{
      public:
            void show(){
                  cout<<"class D"<<endl;
            }
};

int main(){
      D d;

      d.display();
      d.show();

      return 0;
}



---------------------------------------------------------------------------------

Here member of class A is being inherited by class B and C which are again
inherited by class D which means D will have 2 copies of class A, one from class B
and one from class C. this show ambiguity.
and gives error like :

error: request for member 'display' is ambiguous|

